---
title:  "Angular playground for [(ngModel)]"
tags: [Angular] 
---

Playground for [(ngModel)] two way binding, I was working on my internship project. There is such usage of [(ngModel)] that I'm not familiar with. So I document my thought and finding.

## [value] for value binding

Implement the following

```ts

@Component({
  selector: 'app-root',
  template: `
    <input type = "text" [value] = "value">
    {{value}}
  `,
  styleUrls: ['./app.component.sass']
})
export class AppComponent implements OnInit{

  value:String = "hello world";
  
  ngOnInit(){
  }
}
```
This will display `hello world` initially both inside the text field.

Upon typing, this won't change the `value`

![pic1](/assets/images/2020-09-23/pic1.png)


## Log the `value` upon changing

now try to `console.log()` the value that has been typed.

```ts

@Component({
  selector: 'app-root',
  template: `
    <input type="text" [value]="value" (change)="logValue($event)" />
    {{ value }}
  `,
  styleUrls: ['./app.component.sass'],
})
export class AppComponent implements OnInit {
  value: String = 'hello world';

  ngOnInit() {}

  logValue($event){
    console.log($event.target.value);
  }
}
```

This will result a `$event`, if `$event.target.value`. However this won't effect the `this.value` inside the component.

![pic2](/assets/images/2020-09-23/pic2.png)

## Test on `value` upon keyup

Create Two Input fields, and trigger value change upon `keyup`, 

all three `value` changed simultaneously.

```ts
@Component({
  selector: 'app-root',
  template: `
    <input type="text" [value]="value" (keyup)="logValue($event)" />

    <input type="text" [value]="value" (keyup)="logValue($event)" />
    {{ value }}
  `,
  styleUrls: ['./app.component.sass'],
})
export class AppComponent implements OnInit {
  value: String = 'hello world';

  ngOnInit() {}

  logValue($event) {
    this.value = $event.target.value;
  }
}

```
![pic3](/assets/images/2020-09-23/pic3.png)

## two way binding [(ngModel)]

Import the `FormModule` inside the `app.module.ts` to enable `[(ngModel)]`
Work pretty similar to `keydown` and binds the `$event.target.value` to the `value`, and it doesn't requires `[value]="value"` to display value inside the text field.

```ts
@Component({
  selector: 'app-root',
  template: `
    <input type="text" [(ngModel)]="value" />

    <input type="text" [value]="value" (keyup)="logValue($event)" />
    {{ value }}
  `,
  styleUrls: ['./app.component.sass'],
})
export class AppComponent implements OnInit {
  value: String = 'hello world';

  ngOnInit() {}

  logValue($event) {
    this.value = $event.target.value;
  }
}
```
![pic4](/assets/images/2020-09-23/pic4.png)

## conflicting between [(ngModel)] and [value]

Enable both [value] and [(ngModel)] to see what happens. Create a second `value2` and bind it to [(ngModel)], meanwhile allowing

```ts
@Component({
  selector: 'app-root',
  template: `
    <input type="text" [value]="value" [(ngModel)]="value2" />

    <input type="text" [value]="value" (keyup)="logValue($event)" />

    <input type="text" [value]="value2" (keyup)="logValue2($event)" />

    <div>{{ value }}</div>
    <div>{{ value2 }}</div>
    
  `,
  styleUrls: ['./app.component.sass'],
})
export class AppComponent implements OnInit {
  value: String = 'hello world';
  value2: String = 'hello world 2';

  ngOnInit() {}

  logValue($event) {
    this.value = $event.target.value;
  }
  logValue2($event) {
    this.value2 = $event.target.value;
  }
```
Both `value` and `value 2` will result changes in the `<input>` field with both [(ngModel)] and [value] on it.

![pic5](/assets/images/2020-09-23/pic5.png)

## [(ngModel)] binding to object 

Enable see what happens if `[(ngModel)]` binds to a key of an object.

```ts
@Component({
  selector: 'app-root',
  template: `
    <input type="text" [(ngModel)]="object.key" [value]="value" />

    <input type="text" [value]="value" (keyup)="logValue($event)" />

    <div>{{ value }}</div>

    <div>{{ object.key }}</div>
  `,
  styleUrls: ['./app.component.sass'],
})
export class AppComponent implements OnInit {
  value: String = 'hello world';
  object = { key: 'hello world from object' };

  ngOnInit() {}

  logValue($event) {
    this.value = $event.target.value;
  }

}
```

[(ngModel)] can be bind to key of an object. and change value of a certain key

![pic6](/assets/images/2020-09-23/pic6.png)

## [(ngModel)] effect on radio

Check what effect does [(ngModel)] has on `radio` input


```ts
@Component({
  selector: 'app-root',
  template: `
    <input type="radio" [(ngModel)]="selected" [value]="value" />

    <input type="text" [value]="value" (keyup)="logValue($event)" />

    <div>{{ value }}</div>

    <div>{{ selected }}</div>
  `,
  styleUrls: ['./app.component.sass'],
})
export class AppComponent implements OnInit {
  value: String = 'hello world';
  selected = "selected";

  ngOnInit() {}

  logValue($event) {
    this.value = $event.target.value;
  }
```

[(ngModel)] will assign `value` of input to the `selected`.


Finding Note: 
1. If there isn't a `value` attribute in a `type='radio'` input, upon selected, [(ngModel)] will assign `value` to null.
   
2. Interestingly, initially [(ngModel)] will be mapped against the `[value]`.If both value equal, radio button is **selected** by default. If `[value]` doesn't exist, it's considered as `undefined`, if [(ngModel)] binding to a variable that also has value of `undefined`, radio button will still be selected by default.
   
3. Reclicking selected button can't really unselected it. However, dynamically modify [(ngModel)] can toggle selection (button will be selected when matching the `value` else `unselected`). However, dynamically changing `[value]` to match [(ngModel)] will have no effect on the selection of radio button

## [(ngModel)] effect on checkbox
```ts
@Component({
  selector: 'app-root',
  template: `
    <input type="checkbox" [(ngModel)]="selected" [value]="value" />

    <input type="text" [value]="value" (keyup)="logValue($event)" />

    <div>{{ value }}</div>

    <div>{{ selected }}</div>
  `,
  styleUrls: ['./app.component.sass'],
})
export class AppComponent implements OnInit {
  value: String = 'hello world';
  selected = "true";

  ngOnInit() {}

  logValue($event) {
    this.value = $event.target.value;
  }
```

[(ngModel)] will evaluate `selected` here. If it's `true`, checked box will be selected initially. Whereas setting `value = "true"` or `[value]=selected` won't have any effect to the checked status

## Conclusion

1. value only effect what to display to the text input field. Initially it will assigned the initial assigned `value`.
2. with [(ngModel)], we don't need to include [value].
3. for initial display, [(ngModel)] takes priority than [value]. However, both binding will have effect on display.
4. [(ngModel)] can bind to key of an object.
5. if [(ngModel)] is assigned to a `type = 'radio'` input. upon selected will assign current `[value]` to the variable, if there isn't. Assign `undefined`.
6. if both `[value]`  and [(ngModel)] have the same value (including the case when both are `undefined`). Radio button will be selected by default.
7. Dynamically modify [(ngModel)] can toggle selection. Dynamically modify [value] won't have effect on selection.
8. [(ngModel)] can be modify to be `true` of `false` for the initial state of `checkbox` type input. No effect on initial state if only [value] is set.